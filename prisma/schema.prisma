// Simplified Prisma schema with core models
// Run: npx prisma generate && npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// — Core tenant organization
model Clinic {
  id                String           @id @default(uuid())
  name              String
  slug              String           @unique
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  country           String           @default("Mongolia")
  timezone          String           @default("Asia/Ulaanbaatar")
  
  // Basic subscription
  maxDoctors        Int              @default(5)
  maxAppointments   Int              @default(1000) // per month
  isActive          Boolean          @default(true)
  
  // Relationships
  doctors           Doctor[]
  appointments      Appointment[]
  // users             User[]
  
  // Audit
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([slug])
  @@index([isActive])
}

/// — Doctors in the clinic
model Doctor {
  id                String              @id @default(uuid())
  clinic            Clinic              @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  clinicId          String
  
  // Personal info
  fullName          String
  email             String?
  phone             String?
  bio               String?
  
  // Professional info
  specialty         String?
  yearsExperience   Int                 @default(0)
  
  // Status
  isActive          Boolean             @default(true)
  
  // Relationships
  appointments      Appointment[]
  
  // Audit
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@unique([clinicId, email])
  @@index([clinicId, isActive])
}

/// — Users (formerly patients)
model User {
  id              String        @id @default(uuid())
  // clinic          Clinic        @relation(fields: [clinicId], references: [id])
  // clinicId        String
  
  // Personal info
  fullName        String
  email           String        @unique
  phone           String?
  dateOfBirth     DateTime?
  gender          Gender?
  password        String
  
  // Address
  address         String?
  city            String?
  
  // Medical basics
  // allergies       String[]      @default([])
  medicalHistory  String?
  
  // Relationships
  appointments    Appointment[]
  
  // Status
  isActive        Boolean       @default(true)
  
  // Audit
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([email])
  // @@index([clinicId])
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

/// — Core appointments
model Appointment {
  id            String            @id @default(uuid())
  
  // Core relationships
  clinic        Clinic            @relation(fields: [clinicId], references: [id])
  clinicId      String
  doctor        Doctor            @relation(fields: [doctorId], references: [id])
  doctorId      String
  user          User              @relation(fields: [userId], references: [id])
  userId        String
  
  // Scheduling
  startAt       DateTime
  endAt         DateTime
  
  // Status
  status        AppointmentStatus @default(PENDING)
  
  // Basic details
  totalCents    Int               @default(0)
  notes         String?
  
  // Cancellation
  cancelledAt   DateTime?
  cancellationReason String?
  
  // Audit
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  @@index([clinicId, startAt])
  @@index([doctorId, startAt])
  @@index([userId, startAt])
  @@index([status, startAt])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}